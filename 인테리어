import React, { useState, useCallback } from 'react';
import { Card } from '~/components/ui/Card';
import { Button } from '~/components/ui/Button';
import { Input } from '~/components/ui/Input';
import { Label } from '~/components/ui/Label';
import { Separator } from '~/components/ui/Separator';
import { InteriorSpaceSelector } from './InteriorSpaceSelector';
import { MaterialSelector } from './MaterialSelector';
import { EstimateResults } from './EstimateResults';
import { ServiceSelector } from './ServiceSelector';

export interface EstimateData {
  spaces: Record<string, { area: number; selected: boolean }>;
  materials: Record<string, { selected: boolean; grade: string }>;
  services: Record<string, boolean>;
  laborCosts: number;
  materialCosts: number;
  totalCost: number;
}

export function InteriorEstimateCalculator() {
  const [currentStep, setCurrentStep] = useState(1);
  const [estimateData, setEstimateData] = useState<EstimateData>({
    spaces: {},
    materials: {},
    services: {},
    laborCosts: 0,
    materialCosts: 0,
    totalCost: 0,
  });

  const handleSpaceChange = useCallback((spaceId: string, area: number, selected: boolean) => {
    setEstimateData(prev => ({
      ...prev,
      spaces: {
        ...prev.spaces,
        [spaceId]: { area, selected }
      }
    }));
  }, []);

  const handleMaterialChange = useCallback((materialId: string, selected: boolean, grade: string) => {
    setEstimateData(prev => ({
      ...prev,
      materials: {
        ...prev.materials,
        [materialId]: { selected, grade }
      }
    }));
  }, []);

  const handleServiceChange = useCallback((serviceId: string, selected: boolean) => {
    setEstimateData(prev => ({
      ...prev,
      services: {
        ...prev.services,
        [serviceId]: selected
      }
    }));
  }, []);

  const calculateEstimate = useCallback(() => {
    // 견적 계산 로직
    let materialCosts = 0;
    let laborCosts = 0;

    // 공간별 비용 계산
    Object.entries(estimateData.spaces).forEach(([spaceId, space]) => {
      if (space.selected) {
        const baseCostPerSqm = getSpaceBaseCost(spaceId);
        materialCosts += space.area * baseCostPerSqm.material;
        laborCosts += space.area * baseCostPerSqm.labor;
      }
    });

    // 자재 등급별 추가 비용
    Object.entries(estimateData.materials).forEach(([materialId, material]) => {
      if (material.selected) {
        const multiplier = getMaterialMultiplier(material.grade);
        materialCosts *= multiplier;
      }
    });

    // 추가 서비스 비용
    Object.entries(estimateData.services).forEach(([serviceId, selected]) => {
      if (selected) {
        const serviceCost = getServiceCost(serviceId);
        laborCosts += serviceCost;
      }
    });

    const totalCost = materialCosts + laborCosts;

    setEstimateData(prev => ({
      ...prev,
      materialCosts,
      laborCosts,
      totalCost
    }));
  }, [estimateData]);

  const nextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(prev => prev + 1);
    }
    if (currentStep === 3) {
      calculateEstimate();
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      {/* Hero Section */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          인테리어 견적 계산기
        </h1>
        <p className="text-xl text-gray-600 mb-8">
          정확하고 투명한 인테리어 시공비를 미리 확인해보세요
        </p>
        
        {/* Progress Indicator */}
        <div className="flex justify-center items-center space-x-4 mb-8">
          {[1, 2, 3, 4].map((step) => (
            <div key={step} className="flex items-center">
              <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold ${
                step <= currentStep 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-500'
              }`}>
                {step}
              </div>
              {step < 4 && (
                <div className={`w-12 h-1 mx-2 ${
                  step < currentStep ? 'bg-blue-600' : 'bg-gray-200'
                }`} />
              )}
            </div>
          ))}
        </div>

        <div className="text-sm text-gray-500 mb-8">
          {currentStep === 1 && "공간 선택 및 면적 입력"}
          {currentStep === 2 && "자재 선택 및 등급 설정"}
          {currentStep === 3 && "추가 서비스 선택"}
          {currentStep === 4 && "견적 결과 확인"}
        </div>
      </div>

      {/* Step Content */}
      <Card className="p-8 mb-8">
        {currentStep === 1 && (
          <InteriorSpaceSelector 
            spaces={estimateData.spaces}
            onSpaceChange={handleSpaceChange}
          />
        )}
        
        {currentStep === 2 && (
          <MaterialSelector 
            materials={estimateData.materials}
            onMaterialChange={handleMaterialChange}
          />
        )}
        
        {currentStep === 3 && (
          <ServiceSelector 
            services={estimateData.services}
            onServiceChange={handleServiceChange}
          />
        )}
        
        {currentStep === 4 && (
          <EstimateResults estimateData={estimateData} />
        )}
      </Card>

      {/* Navigation Buttons */}
      <div className="flex justify-between">
        <Button 
          variant="outline" 
          onClick={prevStep}
          disabled={currentStep === 1}
        >
          이전 단계
        </Button>
        
        {currentStep < 4 ? (
          <Button onClick={nextStep}>
            다음 단계
          </Button>
        ) : (
          <Button onClick={() => window.print()}>
            견적서 출력
          </Button>
        )}
      </div>
    </div>
  );
}

// 헬퍼 함수들
function getSpaceBaseCost(spaceId: string) {
  const costs = {
    living: { material: 150000, labor: 100000 },
    kitchen: { material: 300000, labor: 200000 },
    bedroom: { material: 120000, labor: 80000 },
    bathroom: { material: 400000, labor: 300000 },
    study: { material: 180000, labor: 120000 },
  };
  return costs[spaceId as keyof typeof costs] || { material: 150000, labor: 100000 };
}

function getMaterialMultiplier(grade: string) {
  const multipliers = {
    basic: 1.0,
    standard: 1.3,
    premium: 1.6,
    luxury: 2.0,
  };
  return multipliers[grade as keyof typeof multipliers] || 1.0;
}

function getServiceCost(serviceId: string) {
  const costs = {
    design: 500000,
    supervision: 300000,
    cleanup: 200000,
    warranty: 100000,
  };
  return costs[serviceId as keyof typeof costs] || 0;
}
